#! /usr/bin/perl -w

#####
#
# Copyright 2003-2004 Joel Aelwyn. All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the Author nor the names of any contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.
#
# $Id: debpool 54 2005-02-21 21:48:29Z joel $
#
#####

# We always want to be careful about things...

use strict;
use warnings;

use POSIX; # This gets us strftime.

use DebPool::Config qw(:vars);

# Okay. We're more or less ready to go. First, load some modules that we
# know we'll be calling.

use DebPool::Dirs qw(:functions :vars); # Directory management
use DebPool::DB qw(:functions :vars); # Various databases
use DebPool::GnuPG qw(:functions :vars); # GnuPG interaction routines
use DebPool::Logging qw(:functions :facility :level); # Logging routines
use DebPool::Packages qw(:functions :vars); # Distribution databases
use DebPool::Signal qw(:functions :vars); # Handle signals
use DebPool::Parser qw(:functions :vars); # File parsing routines

# Before we do anything else, let's find out if we need to act as a daemon,
# and if so, whether we can manage to pull it off.

if ($Options{'daemon'}) {
    Log_Message("Trying to enter daemon mode.", LOG_GENERAL, LOG_INFO);
    require Proc::Daemon;
    Proc::Daemon::Init();
    Log_Message("Now running as a daemon.", LOG_GENERAL, LOG_INFO);
}

# Set up a directory for debpool in the user's HOME directory, even if we're
# sure that it will never be used.
if (! -d "$ENV{'HOME'}/.debpool") {
    mkdir("$ENV{'HOME'}/.debpool") or
    Log_Message(
        "Failed to create user configuration directory '" .
            $ENV{'HOME'} . "/.debpool'.", LOG_GENERAL, LOG_ERROR);
}

# Have support for multiple compression schemes in a dynamical fashion
my @compression_methods;
if ($Options{'compress_dists'}) {
    require DebPool::Gzip; # Gzip interaction routines
    push @compression_methods, new DebPool::Gzip;
}
if ($Options{'bzcompress_dists'}) {
    require DebPool::Bzip2; # Bzip2 interaction routines
    push @compression_methods, new DebPool::Bzip2;
}

# Create the directory tree. This is clean even it it already exists,
# so we can do it every time we start up. I believe the fancy word is
# 'idempotent'. We do this before grabbing a lockfile because it should
# never screw anything up, even if run multiple times at once, and our
# lockfile may be (probably is, in fact) in one of these places.

if (!Create_Tree()) {
    my($msg) = "Couldn't create directory tree: $DebPool::Dirs::Error";
    Log_Message($msg, LOG_GENERAL, LOG_FATAL);
    die "$msg\n";
}

# Print the path set for the lockfile and exit. This is mainly used to run
# debpool with start-stop-daemon.

if ($Options{'get_lock_path'}) {
    print "$Options{'lock_file'}\n";
    exit 0;
}

# Obtain a lockfile. We should never run more than one occurance; it's too
# likely that we'd step on our own toes.

my ($lockfh, $statfh);

if (!sysopen($lockfh, $Options{'lock_file'}, O_WRONLY|O_CREAT|O_EXCL, 0644)) {
    my($msg) = "Couldn't obtain lockfile '$Options{'lock_file'}': ";
    if (( ! -s $Options{'lock_file'} ) and
    (open($lockfh, '>', $Options{'lock_file'}))) {
        # Empty file found for lock file
        print $lockfh "$$\n";
        close($lockfh);
    } elsif (open($lockfh, '<', $Options{'lock_file'}) &&
    (my($pid) = <$lockfh>)) {
        chomp($pid);
        if (open($statfh, '<', "/proc/$pid/stat") &&
        (my($stat) = <$statfh>)) {
            if ($stat =~ m/debpool/) {
                # debpool process was already started
                $msg .= "debpool was already running with PID $pid\n";
                close($lockfh);
                close($statfh);
                Log_Message($msg, LOG_GENERAL, LOG_ERROR);
                die $msg;
            }
        } else {
            # debpool wasn't running using the specified PID so close
            # the file and reopen it for overwriting.
            close($lockfh);
            if (!open($lockfh, '>', $Options{'lock_file'})) {
                $msg .= "debpool could not place new PID ";
                $msg .= "in lock file.\n";
                Log_Message($msg, LOG_GENERAL, LOG_ERROR);
                die $msg;
            }
            print $lockfh "$$\n";
            close($lockfh);
        }
    } else {
        # Could not read PID from lockfile
        $msg .= "(unable to read PID)\n";
        Log_Message($msg, LOG_GENERAL, LOG_ERROR);
        die $msg;
    }
} else { # debpool wasn't running so create a lock
    print $lockfh "$$\n";
    close($lockfh);
}

if ($Options{'daemon'} && $Options{'use_inotify'}) {
    # Fall back to normal monitoring if Inotify setup fails.
    if (!Setup_Incoming_Watch()) {
        $Options{'use_inotify'} = 0;
        Log_Message(
            "Inotify setup failed. Falling back to normal monitoring.",
            LOG_GENERAL, LOG_WARNING);
    }
}

# Check for any changes files in the incoming directory.

my(@changefiles) = Scan_Changes($Options{'incoming_dir'});

# Start the main loop. We use a do/until loop so that we always fire off at
# least once.

MAIN_LOOP: do {

Log_Message("Starting processing run", LOG_GENERAL, LOG_DEBUG);

# First off, open up our databases. We do this each time through the loop,
# so that they get flushed periodically if we're in daemon mode.

Open_Databases();

# This keeps track of what distributions need to have their Packages and
# Sources files rebuilt. We force it to be 'everything' if the user has
# requested a rebuild (normally from the command line).

my(%rebuild) = ();

if ($Options{'rebuild-files'}) {
    foreach my $dist (@{$Options{'realdists'}}) {
        $rebuild{$dist} = 1;
    }
}

# Go through each of the changes files we found, and process it. This is the
# heart of things.

foreach my $changefile (@changefiles) {
    Log_Message("Processing changefile '$changefile'", LOG_GENERAL, LOG_INFO);

    # $changes_data will be a hash reference
    my $changes_data = Parse_File("$Options{'incoming_dir'}/$changefile");
    if (!$changes_data) {
        Log_Message("Failure parsing changes file '$changefile': " .
                    $DebPool::Packages::Error, LOG_GENERAL, LOG_ERROR);
        next;
    }

    # Name of the source package
    my $package = $changes_data->{'Source'};
    my $section = Guess_Section($changes_data);

    # Version of the package
    my $version = $changes_data->{'Version'};
    my $source_version = $changes_data->{'Source-Version'};

    # The .dsc file will be either $package_$version.dsc or
    # $package_$source_version.dsc dependending if a binNMU was uploaded or not.
    # Also, we want to strip any epochs that might be present in the versions.
    my($dscfile, $dscfile_version);
    if ($source_version) {
        $dscfile_version = Strip_Epoch($source_version);
        $dscfile = $package . "_$dscfile_version.dsc"
    } else {
        $dscfile_version = Strip_Epoch($version);
        $dscfile = $package . "_$dscfile_version.dsc"
    }

    my($with_source) = undef; # Upload with or without source?

    for my $temp (@{$changes_data->{'Architecture'}}) {
        if ('source' eq $temp) {
            $with_source = 1;
        }
    }

    my($has_orig) = undef; # Has an orig tarball?

    foreach my $filehr (keys %{$changes_data->{'Files'}}) {
        if ($filehr =~ m/\Qorig.tar.gz\E$/) {
            $has_orig = 1;
        }
    }

    my $dsc_data;
    if ($with_source) {
        # $dsc_data will be a hash reference
        $dsc_data = Parse_File("$Options{'incoming_dir'}/$dscfile");
        if (!$dsc_data) {
            Log_Message("Failure parsing dsc file '$dscfile': " .
                    $DebPool::Packages::Error, LOG_GENERAL, LOG_ERROR);
            next;
        }
    } else {
        # We grab the dsc data from the dsc file already in the pool
        $dsc_data = Parse_File(join('/',
            ($Options{'pool_dir'}, PoolDir($package, $section), $package)) .
            "/$dscfile");
        if (!$dsc_data) {
            Log_Message("Failure parsing dsc file '$dscfile' from pool: " .
                    $DebPool::Packages::Error, LOG_GENERAL, LOG_ERROR);
            next;
        }
    }

    if ($Options{'require_sigs_meta'}) {
        # First, check the changefile signature

        if (!Check_Signature("$Options{'incoming_dir'}/$changefile")) {
            Reject_Package($changefile, $changes_data);
            Log_Message("GPG signature failure in changes file '$changefile'",
                        LOG_REJECT, LOG_ERROR);
            next;
        } else {
            Log_Message("Successful changes signature: '$changefile'",
                        LOG_GPG, LOG_DEBUG);
        }

        # Now check the dscfile signature

        if ($with_source &&
            !Check_Signature("$Options{'incoming_dir'}/$dscfile")) {
            Reject_Package($changefile, $changes_data);
            Log_Message("GPG signature failure in dsc file '$dscfile'",
                        LOG_REJECT, LOG_ERROR);
            next;
        } else {
            Log_Message("Successful dsc signature: '$dscfile'",
                        LOG_GPG, LOG_DEBUG);
        }
    }

    # Verify MD5 checksums on all files.

    my($valid) = 1;

    foreach my $filehr (keys %{$changes_data->{'Files'}}) {
        if (!(Verify_MD5("$Options{'incoming_dir'}/$filehr",
                        $changes_data->{'Files'}{$filehr}[0]))) {
            $valid = undef;
        }
    }

    if (!$valid) {
        Reject_Package($changefile, $changes_data);

        my($msg) = "MD5 checksum failure in changes file '$changefile'";
        Log_Message($msg, LOG_REJECT, LOG_ERROR);
        next;
    }

    $valid = 1;
    my($rejected) = undef;

    if ($with_source) {
        foreach my $file (keys %{$dsc_data->{'Files'}}) {
            # A bit of a special case here; if the Changes file lists an
            # orig tarball, we must *not* have one for that version in the
            # pool. If it doesn't, then we *must* have one. In either case,
            # as long as it's in the right place we use that file for the
            # MD5Sum check when the file is listed in the DSC.

            my $filekey = $file; # Save the key value for later use
            if ($file =~ /\Qorig.tar.gz\E$/) {
                my($pkg_pooldir) = join('/',
                    ($Options{'pool_dir'}, PoolDir($package, $section),
                    $package));

                if ($has_orig) { # Orig tarball uploaded
                    if ((!$Options{'rollback'}) && (-e "$pkg_pooldir/$file")) {
                        Reject_Package($changefile, $changes_data);

                        my($msg) = "Duplicate orig tarball '$file'";
                        Log_Message($msg, LOG_REJECT, LOG_ERROR);

                        $rejected = 1;
                        last; # Don't check other files, we just rejected
                    } elsif (!(-e "$Options{'incoming_dir'}/$file")) {
                        Reject_Package($changefile, $changes_data);

                        my($msg) = "Missing orig tarball '$file'";
                        Log_Message($msg, LOG_REJECT, LOG_ERROR);

                        $rejected = 1;
                        last; # Don't check other files, we just rejected
                    } else {
                        $file = "$Options{'incoming_dir'}/$file";
                    }
                } else { # Orig tarball in pool - we hope
                    if (!(-e "$pkg_pooldir/$file")) {
                        Reject_Package($changefile, $changes_data);

                        my($msg) = "Missing orig tarball '$file'";
                        Log_Message($msg, LOG_REJECT, LOG_ERROR);

                        $rejected = 1;
                        last; # Don't check other files, we just rejected
                    } else {
                        $file = "$pkg_pooldir/$file";
                    }
                }
            } else { # Not an orig tarball - must be in upload
                $file = "$Options{'incoming_dir'}/$file";
            }

            # Whatever it is, it must also pass the MD5 checksum test.

            if (!(Verify_MD5($file, $dsc_data->{'Files'}{$filekey}[0]))) {
                $valid = undef;
                last; # Don't check other files, we already failed
            }
        }
    } else { # Assuming a binary only upload
        # The dsc file should be uploaded
        my($pkg_pooldir) = join('/',
            ($Options{'pool_dir'}, PoolDir($package, $section),
            $package));
        my $dsc_check = "$pkg_pooldir/$dscfile";
        if ( ! -e $dsc_check ) {
            Reject_Package($changefile, $changes_data);

            my($msg) = "Attempted to do a binary only upload but the ";
            $msg .= "source information for this package has not been ";
            $msg .= "uploaded.";
            Log_Message($msg, LOG_REJECT, LOG_ERROR);

            $rejected = 1;
            last; # Don't check other files, we just rejected
        }
        foreach my $filehr (keys %{$changes_data->{'Files'}}) {
            my($file) = $filehr;
            if (!(Verify_MD5($file, $changes_data->{'Files'}{$filehr}[0]))) {
                $valid = undef;
                last; # Don't check other files, we failed
            }
        }
    }

    next if ($rejected); # Reject message already logged, go to next package.

    if (!$valid) {
        Reject_Package($changefile, $changes_data);

        my($msg) = "MD5 checksum failure in dsc file '$dscfile'";
        Log_Message($msg, LOG_REJECT, LOG_ERROR);
        next;
    }

    # Go through each arch in .changes file and check if the repository
    # is configured for that arch.

    $rejected = undef;
    my @chg_archs = grep(!/^(source|all)$/, @{$changes_data->{'Architecture'}});

    foreach my $chg_arch (@chg_archs) {
        unless ( grep /^\Q$chg_arch\E$/, @{$Options{'archs'}} ) {
            Reject_Package($changefile, $changes_data);
            my $msg =
                "The archive isn't configured for '$chg_arch' type packages.";
            Log_Message($msg, LOG_REJECT, LOG_ERROR);
            $rejected = 1;
            last;
        }
    }

    next if ($rejected); # Reject message already logged, go to next package.

    # Go through each distribution in the changes file, and decide whether
    # the package is valid for that distribution.

    my(@valid_dists);

    foreach my $distribution (@{$changes_data->{'Distribution'}}) {
        my $realdist = undef;

        if (defined($Options{'virtual_dists'}->{$distribution})) {
            $realdist = $Options{'virtual_dists'}->{$distribution};
        }

        if (defined($Options{'dists'}->{$distribution})) {
            $realdist = $Options{'dists'}->{$distribution};
        }

        if (!defined($realdist)) {
            Log_Message("Distribution $distribution does not exist",
                        LOG_INSTALL, LOG_ERROR);
            next;
        }

        my $allow = Allow_Version($package, $version, $realdist,
            $changes_data->{'Architecture'});

        if (!defined($allow)) {
            Log_Message("Version check for $version failed: " .
                        $DebPool::Packages::Error, LOG_INSTALL, LOG_ERROR);
            next;
        }

        if (!$allow) {
            Log_Message("Cannot install version $version of $package to " .
                        "$realdist", LOG_INSTALL, LOG_WARNING);
            next;
        }

        # It's valid. Put it in the list.

        push(@valid_dists, $realdist);
    }

    if (-1 == $#valid_dists) {
        Reject_Package($changefile, $changes_data);
        Log_Message("No valid distributions for version $version of $package",
                    LOG_REJECT, LOG_ERROR);
        next;
    }

    # Install the package
    if (Install_Package($changefile, $dscfile, \@valid_dists, $changes_data,
        $dsc_data)) {
        foreach my $dist (@valid_dists) {
            $rebuild{$dist} = 1;
        }

        my($msg) = "Installed $package ($version) to ";
        $msg .= "distribution(s): " . join(', ', @valid_dists);
        Log_Message($msg, LOG_INSTALL, LOG_INFO);
    } else {
        # Something is very, very wrong.
        Log_Message("Couldn't install package '$package': " .
                    $DebPool::Packages::Error, LOG_INSTALL, LOG_FATAL);
        Close_Databases();
        unlink($Options{'lock_file'}); # Release our lock
        die "Couldn't install package '$package'\n";
    }

    # And, now that that's done, audit the package area in the pool to get
    # rid of crufty, obsolete versions.

    Audit_Package($package, $changefile, $changes_data);
}

# Regenerate {Packages,Sources}{,.gz} for distributions which need it. Also
# rebuild Release files that need it, if we're doing them.

foreach my $dist (keys(%rebuild)) {
    my(@rel_filelist) = ();
    foreach my $section (@{$Options{'sections'}}) {
        my(@archs) = @{$Options{'archs'}};
        @archs = grep(!/^all$/, @archs); # We don't build binary-all files.

        my($arch);

ARCH_LOOP:
        foreach $arch (@{$Options{'archs'}}) {
            # We cheat, and use @triple for dist/section/arch inputs.
            # Perl lets us get away with this. I'd care, except that Perl
            # prototyping isn't, so it's useless to not do this.

            my(@triple) = ($dist, $section, $arch);

            # Generate a Packages/Sources file.

            my($file) = Generate_List(@triple);

            if (!defined($file)) {
                my($msg) = "Couldn't create list for $dist/$section/${arch}: ";
                $msg .= $DebPool::Packages::Error;
                Log_Message($msg, LOG_GENERAL, LOG_ERROR);

                next;
            }

            # If we're compressing distribution files, do that here.

            my @zfiles;
            foreach my $method (@compression_methods) {
                my $zfile = $method->Compress_File($file);

                if (!defined($zfile)) {
                    my($msg) = "Couldn't create compressed file (";
                    $msg .= $method->Name . "): ";
                    $msg .= $method->Error;
                    Log_Message($msg, LOG_GENERAL, LOG_ERROR);
                    unlink($file, @zfiles);
                    next ARCH_LOOP;
                }
                push @zfiles, $zfile;
            }

            # Install {Packages,Sources}{,.gz}

            if (!Install_List(@triple, $file, \@zfiles)) {

                my($msg) = "Couldn't install distribution files for ";
                $msg .= "$dist/$section/${arch}: " . $DebPool::Packages::Error;
                Log_Message($msg, LOG_GENERAL, LOG_ERROR);

                if (-e $file) {
                    unlink($file);
                }

                foreach (@zfiles) {
                    unlink if -e;
                }

                next;
            }

            # If we're doing Release files, now is the time for triples.

            my($relfile);
            my($sigfile);

            if ($Options{'do_release'}) {
                require DebPool::Release;

                # Release versions are YYYY.MM.DD.HH.MM.SS (GMT) by default.

                my($release_version) = strftime('%Y.%m.%d.%H.%M.%S', gmtime());
                $relfile = DebPool::Release::Generate_Release_Triple(
                    @triple, $release_version);

                if (!defined($relfile)) {
                    my($msg) = "Couldn't create Release file: ";
                    $msg .= $DebPool::Release::Error;
                    Log_Message($msg, LOG_GENERAL, LOG_ERROR);

                    unlink($file, @zfiles);
                    next;
                }

                if ($Options{'sign_release'}) {
                    $sigfile = Sign_Release($relfile);

                    if (!defined($sigfile)) {
                        my($msg) = "Couldn't create Release signature file: ";
                        $msg .= $DebPool::GnuPG::Error;
                        Log_Message($msg, LOG_GENERAL, LOG_ERROR);

                        unlink($file, @zfiles);

                        if (defined($relfile)) {
                            unlink($relfile);
                        }

                        next;
                    }
                }
            }

            # Install Release{,.gpg}

            if (defined($relfile) &&
                !DebPool::Release::Install_Release(@triple, $relfile, $sigfile)) {

                my($msg) = "Couldn't install release files for ";
                $msg .= "$dist/$section/${arch}: " . $DebPool::Release::Error;
                Log_Message($msg, LOG_GENERAL, LOG_ERROR);

                if (-e $relfile) {
                    unlink($relfile);
                }

                if (defined($sigfile) && -e $sigfile) {
                    unlink($sigfile);
                }

                next;
            }

            my($pushfile) = Archfile(@triple, 0);
            $pushfile =~ s/${dist}\///;
            push(@rel_filelist, $pushfile);

            foreach (@zfiles) {
                my ($ext) = m{\.([^/]+)$};  # List context!
                push(@rel_filelist, "${pushfile}.${ext}");
            }

            if (defined($relfile)) {
                $pushfile = Archfile(@triple, 1);
                $pushfile =~ s/${dist}\///;
                $pushfile .= '/Release';
                push(@rel_filelist, $pushfile);

                if (defined($sigfile)) {
                    push(@rel_filelist, $pushfile . '.gpg');
                }
            }
        }
    }

    # If we're doing Release files, now is the time for the general dist one.

    my($relfile);
    my($sigfile);

    if ($Options{'do_release'}) {
        require DebPool::Release;

        # Release versions are YYYY.MM.DD.HH.MM.SS (GMT) by default.

        my($release_version) = strftime('%Y.%m.%d.%H.%M.%S', gmtime());
        $relfile = DebPool::Release::Generate_Release_Dist(
            $dist, $release_version, @rel_filelist);

        if (!defined($relfile)) {
            my($msg) = "Couldn't create Release file: ";
            $msg .= $DebPool::Release::Error;
            Log_Message($msg, LOG_GENERAL, LOG_ERROR);
        } else {
            if ($Options{'sign_release'}) {
                $sigfile = Sign_Release($relfile);

                if (!defined($sigfile)) {
                    my($msg) = "Couldn't create Release signature file: ";
                    $msg .= $DebPool::GnuPG::Error;
                    Log_Message($msg, LOG_GENERAL, LOG_ERROR);
                    unlink($relfile);
                    $relfile = undef;
                }
            }
        }
    }

    # Install Release{,.gpg}

    if (defined($relfile) &&
        !DebPool::Release::Install_Release($dist, undef, undef,
            $relfile, $sigfile)) {
        my($msg) = "Couldn't install release files for ";
        $msg .= "${dist}: " . $DebPool::Release::Error;
        Log_Message($msg, LOG_GENERAL, LOG_ERROR);

        if (-e $relfile) {
            unlink($relfile);
        }

        if (defined($sigfile) && -e $sigfile) {
            unlink($sigfile);
        }
    }
}

# Close out the databases, ensuring that they're flushed to disk. We'll
# just reopen them in a moment, if we're in daemon mode; it's still good to
# write them out.

Close_Databases();

# This will short-circuit if we catch a signal while sleeping.

if ($Options{'daemon'}) {
    Log_Message("Waiting on changes to incoming dir.", LOG_GENERAL, LOG_DEBUG);

    @changefiles = Monitor_Incoming();
    if (!@changefiles && !$Signal_Caught) {
        my($msg) = "Error in Monitor_Incoming: " . $DebPool::Dirs::Error;
        Log_Message($msg, LOG_GENERAL, LOG_ERROR);
    }
}

# End of MAIN_LOOP; we loop back until either we're not in daemon mode
# (that is, we've been told to single-pass), or until we catch a signal.

} until ((!$Options{'daemon'}) || $Signal_Caught);

# Release our lock

unlink($Options{'lock_file'});

Log_Message("Exiting.", LOG_GENERAL, LOG_DEBUG);

exit(0);

=head1 NAME

debpool - pool-based Debian package archive manager

=head1 SYNOPSIS

B<debpool> [ I<options> ]

=head1 DESCRIPTION

B<debpool> is a utility for managing pool-based archives of Debian
packages. It can be run by individual users, and/or under a dedicated
system user configuration.

=head1 OVERVIEW

This manual page describes how to specify options for debpool when
running debpool through the command line.

=head1 USAGE

For an option that enables/disables a feature for debpool (boolean
type), simply use the option. For example, to enable daemon mode, run:

B<debpool --daemon>

For an option used to assign a value, use the option and specify the
value to be used. For example, to specify an archive directory to use,
run:

B<debpool --archive_dir> I</path/to/dir>

For an option that accepts multiple values (array type), use the
option and specify the list of values to be used. For example, to
specify the architectures debpool will create a layout for, run:

B<debpool --archs i386 amd64 ...>

Assigning multiple values for an option may also be done by using the
option with a different value multiple times. For example, using the
example with architectures, run:

B<debpool --archs i386 --archs amd64 ...>

For an option that uses hash values (hash types), use the option with
a different hash value as many times as necessary. For example, to
specify the distributions debpool should create a layout for, run:

B<debpool --dists unstable=sid --dists experimental=experimental ...>

=head1 OPTIONS

See the L<debpoolrc> manpage for details on all configuration
options and their defaults.

=head1 FILES

=over 4

=item F</etc/debpool/debpoolrc>

System defaults file.

=item F<$HOME/.debpool/debpoolrc>

User-specific defaults file.

=back

=head1 BUGS

Please submit any bugs relating to debpool to the Debian Bug Tracking
System.

=head1 SEE ALSO

L<debpoolrc>

=head1 AUTHOR

Copyright (c) DebPool Developers <debpool-devel@lists.alioth.debian.org>

This manual page was written for the Debian project, but may be used
by others.

=cut

__END__

# vim:set tabstop=4 expandtab:
